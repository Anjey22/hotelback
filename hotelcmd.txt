Hotel_App cmd and BackUp
mongodb+srv://hotel:Anjey@171103@cluster0.h0hva7t.mongodb.net/
hotel
Anjey@171103

qwerty123@gmail.com

rfce - import React from 'react'
ffc- function

1st termninal

1. npx create-react-app Hotel_App -termninal
2. cd hotel
3. npm i react-router-dom axios - create react router
4. npm install react-bootstrap bootstrap
5.npm i react-spinners -- loading and error
6.npm install @fortawesome/react-fontawesome @fortawesome/fontawesome-svg-core
7. npm install @fortawesome/free-solid-svg-icons
8. npm install express bcrypt jsonwebtoken
9.npm i antd moment - date
10.npm install react-date-range




split terminal

1. npm init
2. npm i express
3. npm i nodemon - to autumatic start(nodemon server)

connect atlas in compass
mongodb+srv://hotel:Anjey@171103@cluster0.h0hva7t.mongodb.net
hotel
Anjey@171103

4. npm i monggoose
5. npm i router
6. add in package.json hotel folder - "proxy": "http://localhost:5000/"
7. npm install express body-parser cors
8. npm install express bcrypt jsonwebtoken



  "dependencies": {
    "axios": "^1.6.8",
    "expess": "^0.0.1-security",
    "express": "^4.19.2",
    "mongoose": "^8.3.4",
    "nodemon": "^3.1.0",
    "react-router-dom": "^6.23.1",
    "router": "^1.3.8",
    "validator": "^13.12.0"

{loading && <Loading />}
                {error && <Error message={error} />}
                {success && <Success message={success} />}





additional notes
First delete/remove node_modules file, then run this code:

npm cache clean -force

npm install -force

npm start

websites used

react-boststraps

reactspinners
bootstrap alerts



  
        <Carousel>
        {rooms.imageurl.map(url=>{
            return
            
           <Carousel.Item>
                   <img src={url} alt="rooms"
      className="d-block w-100 roomsimg"/>
      
            </Carousel.Item>*/
         
        })}



        <div id="carouselExampleDark" class="carousel carousel-dark slide">
  <div class="carousel-indicators">
    <button type="button" data-bs-target="#carouselExampleDark" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
    <button type="button" data-bs-target="#carouselExampleDark" data-bs-slide-to="1" aria-label="Slide 2"></button>
    <button type="button" data-bs-target="#carouselExampleDark" data-bs-slide-to="2" aria-label="Slide 3"></button>
  </div>
  <div class="carousel-inner">
    <div class="carousel-item active" data-bs-interval="10000">
      <img src="..." class="d-block w-100" alt="..."/>
      <div class="carousel-caption d-none d-md-block">
        <h5>First slide label</h5>
        <p>Some representative placeholder content for the first slide.</p>
      </div>
    </div>
    <div class="carousel-item" data-bs-interval="2000">
      <img src="..." class="d-block w-100" alt="..."/>
      <div class="carousel-caption d-none d-md-block">
        <h5>Second slide label</h5>
        <p>Some representative placeholder content for the second slide.</p>
      </div>
    </div>
    <div class="carousel-item">
      <img src="..." class="d-block w-100" alt="..."/>
      <div class="carousel-caption d-none d-md-block">
        <h5>Third slide label</h5>
        <p>Some representative placeholder content for the third slide.</p>
      </div>
    </div>
  </div>
  <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleDark" data-bs-slide="prev">
    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
    <span class="visually-hidden">Previous</span>
  </button>
  <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleDark" data-bs-slide="next">
    <span class="carousel-control-next-icon" aria-hidden="true"></span>
    <span class="visually-hidden">Next</span>
  </button>
</div>


import React, { useState, useEffect } from 'react';
import axios from 'axios';
import Rooms from '../components/Rooms';
import Loading from '../components/loading';
import Error from '../components/Error';
import { DateRange } from 'react-date-range';
import { format, isBefore, startOfToday } from 'date-fns';
import 'react-date-range/dist/styles.css';
import 'react-date-range/dist/theme/default.css';
import './homescreen.css';

const Homescreen = () => {
  const [rooms, setRooms] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(false);
  const [fromdate, setFromdate] = useState('');
  const [todate, setTodate] = useState('');
  const [dateRange, setDateRange] = useState([
    {
      startDate: new Date(),
      endDate: new Date(),
      key: 'selection'
    }
  ]);
  const [datesSelected, setDatesSelected] = useState(false);

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        const response = await axios.get('/api/rooms/getallrooms');
        setRooms(response.data);
        setLoading(false);
      } catch (error) {
        setError(true);
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  const handleSelect = (ranges) => {
    const startDate = ranges.selection.startDate;
    const endDate = ranges.selection.endDate;
    const today = startOfToday();

    if (startDate && endDate) {
      if (isBefore(startDate, today) || isBefore(endDate, today)) {
        alert("Please choose valid dates.");
        return;
      }
      setFromdate(format(startDate, 'dd-MM-yyyy'));
      setTodate(format(endDate, 'dd-MM-yyyy'));
      setDateRange([ranges.selection]);
      setDatesSelected(true);
    } else {
      setDatesSelected(false);
    }
  };

  const handleBookNow = () => {
    if (!datesSelected) {
      alert("Please choose dates first.");
      return;
    }

    // Example: Redirect to booking page with selected dates
    const queryParams = `?fromdate=${fromdate}&todate=${todate}`;
    window.location.href = `/booking${queryParams}`;
  };

  if (loading) return <Loading />;
  if (error) return <Error />;

  return (
    <div className="homescreen-container">
      <h1>Room Details</h1>
      <div className='col-md-3'>
        <DateRange
          ranges={dateRange}
          onChange={handleSelect}
          moveRangeOnFirstSelection={false}
          rangeColors={['#3d91ff']}
          editableDateInputs={true}
          showMonthAndYearPickers={true}
        />
      </div>
      <h1>There are {rooms.length} rooms</h1>
      <div className="rooms-container">
        {rooms.map(room => (
          <Rooms key={room._id} room={room} fromdate={fromdate} todate={todate} />
        ))}
      </div>
      <button className="btn btn-primary" onClick={handleBookNow}>Book Now</button>
    </div>
  );
};

export default Homescreen;





import React, { useState, useEffect } from 'react';
import axios from 'axios';
import Rooms from '../components/Rooms';
import Loading from '../components/loading';
import Error from '../components/Error';
import { DateRange } from 'react-date-range';
import { format, isBefore, startOfToday } from 'date-fns';
import 'react-date-range/dist/styles.css';
import 'react-date-range/dist/theme/default.css';
import './homescreen.css';

const Homescreen = () => {
  const [rooms, setRooms] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(false);
  const [fromdate, setFromdate] = useState('');
  const [todate, setTodate] = useState('');
  const [dateRange, setDateRange] = useState([
    {
      startDate: new Date(),
      endDate: new Date(),
      key: 'selection'
    }
  ]);
  const [datesSelected, setDatesSelected] = useState(false);

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        const response = await axios.get('/api/rooms/getallrooms');
        setRooms(response.data);
        setLoading(false);
      } catch (error) {
        setError(true);
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  const handleSelect = (ranges) => {
    const startDate = ranges.selection.startDate;
    const endDate = ranges.selection.endDate;
    const today = startOfToday();

    if (startDate && endDate) {
      if (isBefore(startDate, today) || isBefore(endDate, today)) {
        alert("Please choose valid dates.");
        return;
      }
      setFromdate(format(startDate, 'dd-MM-yyyy'));
      setTodate(format(endDate, 'dd-MM-yyyy'));
      setDateRange([ranges.selection]);
      setDatesSelected(true);
    } else {
      setDatesSelected(false);
    }
  };

  const handleBookNow = () => {
    if (!datesSelected) {
      alert("Please choose dates first.");
      return;
    }

    // Example: Redirect to booking page with selected dates
    const queryParams = `?fromdate=${fromdate}&todate=${todate}`;
    window.location.href = `/booking${queryParams}`;
  };

  if (loading) return <Loading />;
  if (error) return <Error />;

  return (
    <div className="homescreen-container">
      <h1>Room Details</h1>
      <div className='col-md-3'>
        <DateRange
          ranges={dateRange}
          onChange={handleSelect}
          moveRangeOnFirstSelection={false}
          rangeColors={['#3d91ff']}
          editableDateInputs={true}
          showMonthAndYearPickers={true}
        />
      </div>
      <h1>There are {rooms.length} rooms</h1>
      <div className="rooms-container">
        {rooms.map(room => (
          <Rooms key={room._id} room={room} fromdate={fromdate} todate={todate} />
        ))}
      </div>
      <button className="btn btn-primary" onClick={handleBookNow}>Book Now</button>
    </div>
  );
};

export default Homescreen;

      

{
  "name": "hotel",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "Anjey",
  "license": "ISC",
  "dependencies": {
    "bcrypt": "^5.1.1",
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "^4.19.2",
    "index.js": "^0.0.3",
    "jsonwebtoken": "^9.0.2",
    "mongoose": "^8.3.5",
    "nodemon": "^3.1.0",
    "router": "^1.3.8"
  }
}
